

/*
{
  "organizationIds": [
    1
  ],
  "roleIds": [],
  "userId": 2
}
*/
export const fakeJWT =
  'eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzoyNjA5NzI1ZS01NWQ5LTRmZDAtYTZkYy05YmYzMjk3M2M0MzciLCJ0eXAiOiJKV1QifQ.eyJhdWQiOltdLCJjbGllbnRfaWQiOiJwYXlvbG9neSIsImV4cCI6MTYwNDg2OTQ0MywiZXh0Ijp7Im9yZ2FuaXphdGlvbklkcyI6WzFdLCJyb2xlSWRzIjpbXSwidXNlcklkIjoyfSwiaWF0IjoxNjA0ODY1ODQzLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjQ0NDQvIiwianRpIjoiMTNkYTdiM2YtNDlkNi00MTkyLTkxYzktZmZmODY2NDVmNzNhIiwibmJmIjoxNjA0ODY1ODQzLCJzY3AiOlsib3BlbmlkIiwib2ZmbGluZSJdLCJzdWIiOiJnYWJyaWVsY3ZhekBvdXRsb29rLmNvbSJ9.GgFQNQ8JgwOukbYa9eqxXq7XxwDsIeukUFRu3SVJh916uh4vouAsOimkTCES7oLQC1bh_8BsPrIqkm6MJB97d6UyhavjOXlBQ52g-6oF0eiFQT3cy1VzUY_MtsUuNhjqKee4bEL1oDvPZWnIpa_2dV2-Bg9bpc126falmvf_bLrg7Gi9qoZYKF-W0MCE4XVVA689mhj7kZbSupjaQDVk4fLsXdUmATeA5BBWEdy9TVeiIHPYG8pGdrL5cHs0gtFQOGca5LsgFqDQ6E8O6g3677TswXO7xqLlDMeswdRMgCRNcVOy2CdxmGWtVCZhiKAdDFKqOqGvGIfQgnaf4oPcCPScYItdNpVQ5co-RllruCaDuXMmLrlJ1_l7KEMzTulKfPHo6UU0MfB0oA1OcP8J4sHf10I8B4hs_5NOir_fXNNsFuYoZyxW8DLRoZf08r6ISv-db3W3QUrdbd9Fi5X2Ay5Eo6A8tcRu4SiDduygI-0qOBqecIQSyy6UO03fQdUhmPTe5XrigFqX59BncyVk9CdfFieWdMin_MP78c3fY_v1vIJvUJSy0kwTmM12gCUb7MIVaCW2SOz6dGs7KxR0MnBqdezRKbrVUPqtMYGb3BAeVKkWX_KjbmsResZKZBLaK0qlwVTzUz8_CuwckLgwDmqM_j2cq8CTbXpR_jLNzH0'

/*
{
  "organizationIds": [],
  "roleIds": [
    1,
    2,
    3,
    4
  ],
  "userId": 1,
  "userTypeId": 1
}
*/
export const fakeJWTMaster =
  'eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzozOTI2NGY4ZS1lNmNiLTQyOTktYWQyZS04YTA0NWM1NDVmZDQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOltdLCJjbGllbnRfaWQiOiJwYXlvbG9neSIsImV4cCI6MTYwNTkyMjM3MSwiZXh0Ijp7Im9yZ2FuaXphdGlvbklkcyI6W10sInJvbGVJZHMiOlsxLDIsMyw0XSwidXNlcklkIjoxLCJ1c2VyVHlwZUlkIjoxfSwiaWF0IjoxNjA1OTE4NzcxLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjQ0NDQvIiwianRpIjoiYzQzNzJhYzktOGM1OC00ZThkLWEzZDUtZGIzOGVlMjllMjljIiwibmJmIjoxNjA1OTE4NzcxLCJzY3AiOlsib3BlbmlkIiwib2ZmbGluZSJdLCJzdWIiOiJhZG1pbkBwYXlvbG9neS5pbyJ9.n4Gvx7nxA3CnFvDi1-KR3JZKhSc0bthgifcpI9CIPW6ApF_4eWzlGwHhDEVZ-qTvdeK-TaE8Rr_D6nhuN7kwv5FP3rHH7nwA_jhEj00H9bSs5-YEyCyLCsP2NRrcoeaE6qB-2CFdbACQrLuGUWpbiOg0MnsIHlSRY_62WLTsVrfoFl6vnUeRPG-NOMlrWgECV4V0NGqsZ-kvwK39NWsRhkUHtPyqdL-BNvWlEPPXCVZPAh0EvCWINnA3y2GOEH8Fu6e7ZynQ1SJI6M3FT-4TBvV-CrOAOaRB-J7WDS9KWCDVBdJcsm_b_FrL-1wTV2sO-v5dmrYA99lM-5pcbzczJEXw871oMo-LJJQHVHSKpMvLlTolub_v-fX3IDewzUsLw1fHJZJz7ufZHZQkHXPSZNc-TLtPFgtcb_Dlg95eUl0P7_UYhNHHqg9Ez9iDbvBD43Y1-UXYTggrDbN9TgzsSK6D8ZEnujlgyYTMdr4C3uCGi-h_8qOgy7pCn16YOg_u0juEeb68hNe_CF7MaIsLtfgF0iSLfqNPMMmS5iywIj7XHVUFviLMJWUJHDRlGeIMxfDFXu1suIk0t8ip6kmm4rYMKBVz90Oe3V-nMn18QRzKEoIRHz30dRs1x7OaqleTRdZWBR6_iRu_dXVBUo8PtvjWQ0OcDimR0SpzhZ6nU4w'

// Simple base64 encode
const base64urlEncode = (str: string) => Buffer.from(str).toString('base64')

// Helper to create tokens with custom payload
// export const setupJwtMock = (jwtPayload: { ext: UserJWT }) => {
//   const mockedPayload = base64urlEncode(JSON.stringify(jwtPayload))
//   return `dummyHeader.${mockedPayload}.dummySignature`
// }
